{"version":3,"names":["eclFactFiguresEcCss","eclFactFiguresEuCss","EclFactFigures","getClass","this","columns","styleClass","join","render","h","class"],"sources":["./src/components/ecl-fact-figures/build/styles/ecl-fact-figures-ec.css?tag=ecl-fact-figures&mode=ec&encapsulation=scoped","./src/components/ecl-fact-figures/build/styles/ecl-fact-figures-eu.css?tag=ecl-fact-figures&mode=eu&encapsulation=scoped","./src/components/ecl-fact-figures/ecl-fact-figures.tsx"],"sourcesContent":["/* stylelint-disable scss/operator-no-unspaced */\n/* stylelint-enable scss/operator-no-unspaced */\n/* Breakpoint viewport sizes and media queries.\n\nBreakpoints are defined as a map of (name: minimum width), order from small to large:\n   (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n\n The map defined in the `$breakpoint` global variable is used as the `$breakpoints` argument by default.\n\n Name of the next breakpoint, or null for the last breakpoint.\n\n  >> breakpoint-next(sm)\n   md\n  >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n   md\n  >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n   md\n*/\n/* Minimum breakpoint width. Null for the smallest (first) breakpoint.\n    >> ecl-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n    576px\n*/\n/* Maximum breakpoint width. Null for the largest (last) breakpoint.\n   The maximum value is calculated as the minimum of the next one less 0.1.\n\n   >> ecl-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n   767px\n*/\n/* Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n    Useful for making responsive utilities.\n\n    >> infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n    \"\"  (Returns a blank string)\n    >> infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n    \"-sm\"\n*/\n/**\n * Fact and figures\n * @define fact-figures\n */\n.ecl-fact-figures {\n  background-color: #f2f5f9;\n  border: 1px solid #bfd0e4;\n  border-radius: 0;\n  margin: 0;\n  padding: 1rem;\n}\n\n.ecl-fact-figures__item {\n  color: #404040;\n  font: normal normal 400 1rem/1.25rem arial, sans-serif;\n  margin-top: 2rem;\n}\n.ecl-fact-figures__item:first-of-type {\n  margin-top: 0;\n}\n\n.ecl-fact-figures__icon {\n  color: #004494;\n  margin-bottom: 0.5rem;\n}\n\n.ecl-fact-figures__value {\n  font: normal normal 400 1.75rem/2rem arial, sans-serif;\n  font-weight: 700;\n}\n\n.ecl-fact-figures__title {\n  font: normal normal 400 1.125rem/1.75rem arial, sans-serif;\n  font-weight: 700;\n  margin-top: 0.5rem;\n}\n\n.ecl-fact-figures__description {\n  font: normal normal 400 1rem/1.5rem arial, sans-serif;\n  margin-top: 0.5rem;\n}\n\n.ecl-fact-figures__view-all {\n  border-top: 1px solid #bfd0e4;\n  font: normal normal 400 1rem/1.5rem arial, sans-serif;\n  margin-top: 2rem;\n  padding-top: 1rem;\n}\n\n/* stylelint-disable-next-line order/order */\n@media (min-width: 996px) {\n  .ecl-fact-figures {\n    padding: 2rem;\n  }\n  .ecl-fact-figures__items {\n    display: grid;\n    grid-column-gap: 2rem;\n    grid-row-gap: 2rem;\n  }\n  .ecl-fact-figures--col-2 .ecl-fact-figures__items {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  .ecl-fact-figures--col-3 .ecl-fact-figures__items {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  .ecl-fact-figures--col-4 .ecl-fact-figures__items {\n    grid-template-columns: repeat(4, 1fr);\n  }\n  .ecl-fact-figures__item {\n    margin-top: 0;\n    max-width: 80ch;\n  }\n  .ecl-fact-figures__value {\n    font: normal normal 400 2rem/2.5rem arial, sans-serif;\n    font-weight: 700;\n  }\n  .ecl-fact-figures__view-all {\n    padding-top: 2rem;\n  }\n}","/* stylelint-disable scss/operator-no-unspaced */\n/* stylelint-enable scss/operator-no-unspaced */\n/* Breakpoint viewport sizes and media queries.\n\nBreakpoints are defined as a map of (name: minimum width), order from small to large:\n   (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n\n The map defined in the `$breakpoint` global variable is used as the `$breakpoints` argument by default.\n\n Name of the next breakpoint, or null for the last breakpoint.\n\n  >> breakpoint-next(sm)\n   md\n  >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n   md\n  >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n   md\n*/\n/* Minimum breakpoint width. Null for the smallest (first) breakpoint.\n    >> ecl-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n    576px\n*/\n/* Maximum breakpoint width. Null for the largest (last) breakpoint.\n   The maximum value is calculated as the minimum of the next one less 0.1.\n\n   >> ecl-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n   767px\n*/\n/* Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n    Useful for making responsive utilities.\n\n    >> infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n    \"\"  (Returns a blank string)\n    >> infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n    \"-sm\"\n*/\n/**\n * Fact and figures\n * @define fact-figures\n */\n.ecl-fact-figures {\n  background-color: #f3f6fc;\n  border: 0;\n  border-radius: 8px;\n  margin: 0;\n  padding: 1rem;\n}\n\n.ecl-fact-figures__item {\n  color: #515560;\n  font: normal normal 400 1rem/1.25rem arial, sans-serif;\n  margin-top: 2rem;\n}\n.ecl-fact-figures__item:first-of-type {\n  margin-top: 0;\n}\n\n.ecl-fact-figures__icon {\n  color: #0e47cb;\n  margin-bottom: 0.5rem;\n}\n\n.ecl-fact-figures__value {\n  font: normal normal 400 2.25rem/2.75rem arial, sans-serif;\n  font-weight: 400;\n}\n\n.ecl-fact-figures__title {\n  font: normal normal 400 1.125rem/1.75rem arial, sans-serif;\n  font-weight: 700;\n  margin-top: 0.5rem;\n}\n\n.ecl-fact-figures__description {\n  font: normal normal 400 1rem/1.5rem arial, sans-serif;\n  margin-top: 0.5rem;\n}\n\n.ecl-fact-figures__view-all {\n  border-top: 1px solid #cfdaf5;\n  font: normal normal 400 1rem/1.5rem arial, sans-serif;\n  margin-top: 2rem;\n  padding-top: 1rem;\n}\n\n/* stylelint-disable-next-line order/order */\n@media (min-width: 996px) {\n  .ecl-fact-figures {\n    padding: 2rem;\n  }\n  .ecl-fact-figures__items {\n    display: grid;\n    grid-column-gap: 2rem;\n    grid-row-gap: 2rem;\n  }\n  .ecl-fact-figures--col-2 .ecl-fact-figures__items {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  .ecl-fact-figures--col-3 .ecl-fact-figures__items {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  .ecl-fact-figures--col-4 .ecl-fact-figures__items {\n    grid-template-columns: repeat(4, 1fr);\n  }\n  .ecl-fact-figures__item {\n    margin-top: 0;\n    max-width: 80ch;\n  }\n  .ecl-fact-figures__value {\n    font: normal normal 400 2.625rem/3.25rem arial, sans-serif;\n    font-weight: 400;\n  }\n  .ecl-fact-figures__view-all {\n    padding-top: 2rem;\n  }\n}","import { Component, h, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'ecl-fact-figures',\n  styleUrls: {\n    ec: './build/styles/ecl-fact-figures-ec.css',\n    eu: './build/styles/ecl-fact-figures-eu.css',\n  },\n  shadow: false,\n  scoped: true,\n  assetsDirs: ['build'],\n})\nexport class EclFactFigures {\n  @Prop() theme: string = 'ec';\n  @Prop() styleClass: string;\n  @Prop() columns: number = 3;\n  @Prop() displayIcons: boolean = true;\n\n  getClass(): string {\n    return [\n      `ecl-fact-figures`,\n      `ecl-fact-figures--col-${this.columns}`,\n      this.styleClass\n    ].join(' ');\n  }\n\n  render() {\n    return (\n      <div class={this.getClass()}>\n        <div class=\"ecl-fact-figures__items\">\n          <slot></slot>\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"2CAAA,MAAMA,EAAsB,gxDCA5B,MAAMC,EAAsB,0wD,MCYfC,EAAc,M,oCACD,K,uCAEE,E,kBACM,I,CAEhCC,WACE,MAAO,CACL,mBACA,yBAAyBC,KAAKC,UAC9BD,KAAKE,YACLC,KAAK,I,CAGTC,SACE,OACEC,EAAA,OAAKC,MAAON,KAAKD,YACfM,EAAA,OAAKC,MAAM,2BACTD,EAAA,c"}